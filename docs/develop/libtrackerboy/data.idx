unitSpeed	libtrackerboy/data.html#unitSpeed	data: unitSpeed	
TableId	libtrackerboy/data.html#TableId	data: TableId	
SequenceSize	libtrackerboy/data.html#SequenceSize	data: SequenceSize	
OrderSize	libtrackerboy/data.html#OrderSize	data: OrderSize	
TrackLen	libtrackerboy/data.html#TrackLen	data: TrackLen	
TrackId	libtrackerboy/data.html#TrackId	data: TrackId	
OrderId	libtrackerboy/data.html#OrderId	data: OrderId	
Framerate	libtrackerboy/data.html#Framerate	data: Framerate	
Speed	libtrackerboy/data.html#Speed	data: Speed	
EffectIndex	libtrackerboy/data.html#EffectIndex	data: EffectIndex	
EffectColumns	libtrackerboy/data.html#EffectColumns	data: EffectColumns	
EffectCounts	libtrackerboy/data.html#EffectCounts	data: EffectCounts	
WaveData	libtrackerboy/data.html#WaveData	data: WaveData	
skArp	libtrackerboy/data.html#skArp	SequenceKind.skArp	
skPanning	libtrackerboy/data.html#skPanning	SequenceKind.skPanning	
skPitch	libtrackerboy/data.html#skPitch	SequenceKind.skPitch	
skTimbre	libtrackerboy/data.html#skTimbre	SequenceKind.skTimbre	
SequenceKind	libtrackerboy/data.html#SequenceKind	data: SequenceKind	
Sequence	libtrackerboy/data.html#Sequence	data: Sequence	
Instrument	libtrackerboy/data.html#Instrument	data: Instrument	
Waveform	libtrackerboy/data.html#Waveform	data: Waveform	
SomeData	libtrackerboy/data.html#SomeData	data: SomeData	
InstrumentTable	libtrackerboy/data.html#InstrumentTable	data: InstrumentTable	
WaveformTable	libtrackerboy/data.html#WaveformTable	data: WaveformTable	
SomeTable	libtrackerboy/data.html#SomeTable	data: SomeTable	
OrderRow	libtrackerboy/data.html#OrderRow	data: OrderRow	
Order	libtrackerboy/data.html#Order	data: Order	
etNoEffect	libtrackerboy/data.html#etNoEffect	EffectType.etNoEffect	
etPatternGoto	libtrackerboy/data.html#etPatternGoto	EffectType.etPatternGoto	
etPatternHalt	libtrackerboy/data.html#etPatternHalt	EffectType.etPatternHalt	
etPatternSkip	libtrackerboy/data.html#etPatternSkip	EffectType.etPatternSkip	
etSetTempo	libtrackerboy/data.html#etSetTempo	EffectType.etSetTempo	
etSfx	libtrackerboy/data.html#etSfx	EffectType.etSfx	
etSetEnvelope	libtrackerboy/data.html#etSetEnvelope	EffectType.etSetEnvelope	
etSetTimbre	libtrackerboy/data.html#etSetTimbre	EffectType.etSetTimbre	
etSetPanning	libtrackerboy/data.html#etSetPanning	EffectType.etSetPanning	
etSetSweep	libtrackerboy/data.html#etSetSweep	EffectType.etSetSweep	
etDelayedCut	libtrackerboy/data.html#etDelayedCut	EffectType.etDelayedCut	
etDelayedNote	libtrackerboy/data.html#etDelayedNote	EffectType.etDelayedNote	
etLock	libtrackerboy/data.html#etLock	EffectType.etLock	
etArpeggio	libtrackerboy/data.html#etArpeggio	EffectType.etArpeggio	
etPitchUp	libtrackerboy/data.html#etPitchUp	EffectType.etPitchUp	
etPitchDown	libtrackerboy/data.html#etPitchDown	EffectType.etPitchDown	
etAutoPortamento	libtrackerboy/data.html#etAutoPortamento	EffectType.etAutoPortamento	
etVibrato	libtrackerboy/data.html#etVibrato	EffectType.etVibrato	
etVibratoDelay	libtrackerboy/data.html#etVibratoDelay	EffectType.etVibratoDelay	
etTuning	libtrackerboy/data.html#etTuning	EffectType.etTuning	
etNoteSlideUp	libtrackerboy/data.html#etNoteSlideUp	EffectType.etNoteSlideUp	
etNoteSlideDown	libtrackerboy/data.html#etNoteSlideDown	EffectType.etNoteSlideDown	
etSetGlobalVolume	libtrackerboy/data.html#etSetGlobalVolume	EffectType.etSetGlobalVolume	
EffectType	libtrackerboy/data.html#EffectType	data: EffectType	
Effect	libtrackerboy/data.html#Effect	data: Effect	
TrackRow	libtrackerboy/data.html#TrackRow	data: TrackRow	
Track	libtrackerboy/data.html#Track	data: Track	
Song	libtrackerboy/data.html#Song	data: Song	
SongList	libtrackerboy/data.html#SongList	data: SongList	
InfoString	libtrackerboy/data.html#InfoString	data: InfoString	
systemDmg	libtrackerboy/data.html#systemDmg	System.systemDmg	
systemSgb	libtrackerboy/data.html#systemSgb	System.systemSgb	
systemCustom	libtrackerboy/data.html#systemCustom	System.systemCustom	
System	libtrackerboy/data.html#System	data: System	
ModulePiece	libtrackerboy/data.html#ModulePiece	data: ModulePiece	
Module	libtrackerboy/data.html#Module	data: Module	
defaultRpb	libtrackerboy/data.html#defaultRpb	data: defaultRpb	
defaultRpm	libtrackerboy/data.html#defaultRpm	data: defaultRpm	
defaultSpeed	libtrackerboy/data.html#defaultSpeed	data: defaultSpeed	
defaultTrackSize	libtrackerboy/data.html#defaultTrackSize	data: defaultTrackSize	
defaultFramerate	libtrackerboy/data.html#defaultFramerate	data: defaultFramerate	
effectTypeShortensPattern	libtrackerboy/data.html#effectTypeShortensPattern,EffectType	data: effectTypeShortensPattern(et: EffectType): bool	
`[]`	libtrackerboy/data.html#[],Sequence,ByteIndex	data: `[]`(s: Sequence; i: ByteIndex): uint8	
`[]=`	libtrackerboy/data.html#[]=,Sequence,ByteIndex,uint8	data: `[]=`(s: var Sequence; i: ByteIndex; val: uint8)	
setLen	libtrackerboy/data.html#setLen,Sequence,SequenceSize	data: setLen(s: var Sequence; len: SequenceSize)	
len	libtrackerboy/data.html#len,Sequence	data: len(s: Sequence): int	
data	libtrackerboy/data.html#data,Sequence	data: data(s: Sequence): lent seq[uint8]	
data=	libtrackerboy/data.html#data=,Sequence,sinkseq[uint8]	data: data=(s: var Sequence; data: sink seq[uint8])	
`$`	libtrackerboy/data.html#$,Sequence	data: `$`(s: Sequence): string	
parseSequence	libtrackerboy/data.html#parseSequence,string	data: parseSequence(str: string; minVal = int8.low; maxVal = int8.high): Sequence	
init	libtrackerboy/data.html#init,typedesc[Instrument]	data: init(_: typedesc[Instrument]): Instrument	
new	libtrackerboy/data.html#new,typedesc[Instrument]	data: new(_: typedesc[Instrument]): ref Instrument	
init	libtrackerboy/data.html#init,typedesc[Waveform]	data: init(_: typedesc[Waveform]): Waveform	
new	libtrackerboy/data.html#new,typedesc[Waveform]	data: new(_: typedesc[Waveform]): ref Waveform	
`$`	libtrackerboy/data.html#$,WaveData	data: `$`(wave: WaveData): string	
parseWave	libtrackerboy/data.html#parseWave,string	data: parseWave(str: string): WaveData	
init	libtrackerboy/data.html#init,typedesc[SomeTable]	data: init(_: typedesc[SomeTable]): _.typeOf	
contains	libtrackerboy/data.html#contains,Table[T: SomeData],TableId	data: contains[T: SomeData](t: Table[T]; id: TableId): bool	
capacity	libtrackerboy/data.html#capacity,Table[T: SomeData]	data: capacity[T: SomeData](t: Table[T]): static[int]	
`[]`	libtrackerboy/data.html#[],Table[T: SomeData],TableId	data: `[]`[T: SomeData](t: var Table[T]; id: TableId): ref T	
`[]`	libtrackerboy/data.html#[],Table[T: SomeData],TableId_2	data: `[]`[T: SomeData](t: Table[T]; id: TableId): Immutable[ref T]	
items	libtrackerboy/data.html#items.i,Table[T: SomeData]	data: items[T: SomeData](t: Table[T]): TableId	
add	libtrackerboy/data.html#add,Table[T: SomeData]	data: add[T: SomeData](t: var Table[T]): TableId	
add	libtrackerboy/data.html#add,Table[T: SomeData],TableId	data: add[T: SomeData](t: var Table[T]; id: TableId)	
duplicate	libtrackerboy/data.html#duplicate,Table[T: SomeData],TableId	data: duplicate[T: SomeData](t: var Table[T]; id: TableId): TableId	
remove	libtrackerboy/data.html#remove,Table[T: SomeData],TableId	data: remove[T: SomeData](t: var Table[T]; id: TableId)	
len	libtrackerboy/data.html#len,Table[T: SomeData]	data: len[T: SomeData](t: Table[T]): int	
nextAvailableId	libtrackerboy/data.html#nextAvailableId,Table[T: SomeData]	data: nextAvailableId[T: SomeData](t: Table[T]): TableId	
next	libtrackerboy/data.html#next,Table[T: SomeData],TableId	data: next[T: SomeData](t: Table[T]; start: TableId = 0): Option[TableId]	
wavedata	libtrackerboy/data.html#wavedata,WaveformTable,TableId	data: wavedata(t: WaveformTable; id: TableId): WaveData	
init	libtrackerboy/data.html#init,typedesc[Order]	data: init(_: typedesc[Order]): Order	
`[]`	libtrackerboy/data.html#[],Order,Natural	data: `[]`(o: Order; index: Natural): OrderRow	
`[]=`	libtrackerboy/data.html#[]=,Order,Natural,OrderRow	data: `[]=`(o: var Order; index: Natural; val: OrderRow)	
data	libtrackerboy/data.html#data,Order	data: data(o: Order): lent seq[OrderRow]	
data=	libtrackerboy/data.html#data=,Order,sinkseq[OrderRow]	data: data=(o: var Order; data: sink seq[OrderRow])	
len	libtrackerboy/data.html#len,Order	data: len(o: Order): int	
nextUnused	libtrackerboy/data.html#nextUnused,Order	data: nextUnused(o: Order): OrderRow	
insert	libtrackerboy/data.html#insert,Order,OrderRow,ByteIndex	data: insert(o: var Order; row: OrderRow; before: ByteIndex = 0)	
insert	libtrackerboy/data.html#insert,Order,openArray[OrderRow],ByteIndex	data: insert(o: var Order; data: openArray[OrderRow]; before: ByteIndex)	
remove	libtrackerboy/data.html#remove,Order,ByteIndex,OrderSize	data: remove(o: var Order; index: ByteIndex; count: OrderSize = 1)	
setLen	libtrackerboy/data.html#setLen,Order,OrderSize	data: setLen(o: var Order; len: OrderSize)	
swap	libtrackerboy/data.html#swap,Order,ByteIndex,ByteIndex	data: swap(o: var Order; i1, i2: ByteIndex)	
queryNote	libtrackerboy/data.html#queryNote,TrackRow	data: queryNote(row: TrackRow): Option[uint8]	
queryInstrument	libtrackerboy/data.html#queryInstrument,TrackRow	data: queryInstrument(row: TrackRow): Option[uint8]	
isEmpty	libtrackerboy/data.html#isEmpty,TrackRow	data: isEmpty(row: TrackRow): bool	
init	libtrackerboy/data.html#init,typedesc[Track],TrackLen	data: init(_: typedesc[Track]; len: TrackLen): Track	
`[]`	libtrackerboy/data.html#[],Track,ByteIndex	data: `[]`(t: Track; i: ByteIndex): TrackRow	
`[]`	libtrackerboy/data.html#[],Track,ByteIndex_2	data: `[]`(t: var Track; i: ByteIndex): var TrackRow	
`[]=`	libtrackerboy/data.html#[]=,Track,ByteIndex,TrackRow	data: `[]=`(t: var Track; i: ByteIndex; v: TrackRow)	
isValid	libtrackerboy/data.html#isValid,Track	data: isValid(t: Track): bool	
len	libtrackerboy/data.html#len,Track	data: len(t: Track): int	
setLen	libtrackerboy/data.html#setLen,Track,TrackLen	data: setLen(t: var Track; len: TrackLen)	
items	libtrackerboy/data.html#items.i,Track	data: items(t: Track): TrackRow	
mitems	libtrackerboy/data.html#mitems.i,Track	data: mitems(t: var Track): var TrackRow	
setNote	libtrackerboy/data.html#setNote,Track,ByteIndex,uint8	data: setNote(t: var Track; i: ByteIndex; note: uint8)	
setInstrument	libtrackerboy/data.html#setInstrument,Track,ByteIndex,TableId	data: setInstrument(t: var Track; i: ByteIndex; instrument: TableId)	
setEffect	libtrackerboy/data.html#setEffect,Track,ByteIndex,EffectIndex,EffectType,uint8	data: setEffect(t: var Track; i: ByteIndex; effectNo: EffectIndex; et: EffectType;\n          param = 0&apos;u8)	
setEffectType	libtrackerboy/data.html#setEffectType,Track,ByteIndex,EffectIndex,EffectType	data: setEffectType(t: var Track; i: ByteIndex; effectNo: EffectIndex; et: EffectType)	
setEffectParam	libtrackerboy/data.html#setEffectParam,Track,ByteIndex,EffectIndex,uint8	data: setEffectParam(t: var Track; i: ByteIndex; effectNo: EffectIndex; param: uint8)	
totalRows	libtrackerboy/data.html#totalRows,Track	data: totalRows(t: Track): int	
init	libtrackerboy/data.html#init,typedesc[Song]	data: init(_: typedesc[Song]): Song	
new	libtrackerboy/data.html#new,typedesc[Song]	data: new(_: typedesc[Song]): ref Song	
new	libtrackerboy/data.html#new,typedesc[Song],Song	data: new(_: typedesc[Song]; song: Song): ref Song	
removeAllTracks	libtrackerboy/data.html#removeAllTracks,Song	data: removeAllTracks(s: var Song)	
speedToFloat	libtrackerboy/data.html#speedToFloat,Speed	data: speedToFloat(speed: Speed): float	
speedToTempo	libtrackerboy/data.html#speedToTempo,float,PositiveByte,float	data: speedToTempo(speed: float; rowsPerBeat: PositiveByte; framerate: float): float	
getTrack	libtrackerboy/data.html#getTrack,Song,ChannelId,ByteIndex	data: getTrack(s: Song; ch: ChannelId; order: ByteIndex): Track	
trackIds	libtrackerboy/data.html#trackIds.i,Song,ChannelId	data: trackIds(s: Song; ch: ChannelId): ByteIndex	
getRow	libtrackerboy/data.html#getRow,Song,ChannelId,ByteIndex,ByteIndex	data: getRow(s: var Song; ch: ChannelId; order, row: ByteIndex): var TrackRow	
getRow	libtrackerboy/data.html#getRow,Song,ChannelId,ByteIndex,ByteIndex_2	data: getRow(s: Song; ch: ChannelId; order, row: ByteIndex): TrackRow	
totalTracks	libtrackerboy/data.html#totalTracks,Song	data: totalTracks(s: Song): int	
trackLen	libtrackerboy/data.html#trackLen,Song	data: trackLen(s: Song): TrackLen	
setTrackLen	libtrackerboy/data.html#setTrackLen,Song,TrackLen	data: setTrackLen(s: var Song; size: TrackLen)	
setTrack	libtrackerboy/data.html#setTrack,Song,ChannelId,ByteIndex,sinkTrack	data: setTrack(s: var Song; ch: ChannelId; order: ByteIndex; track: sink Track)	
estimateSpeed	libtrackerboy/data.html#estimateSpeed,Song,float,float	data: estimateSpeed(s: Song; tempo, framerate: float): Speed	
tempo	libtrackerboy/data.html#tempo,Song,float	data: tempo(s: Song; framerate: float): float	
editTrack	libtrackerboy/data.html#editTrack.t,Song,ChannelId,ByteIndex,untyped,untyped	data: editTrack(s: var Song; ch: ChannelId; trackId: ByteIndex; value, body: untyped): untyped	
viewTrack	libtrackerboy/data.html#viewTrack.t,Song,ChannelId,ByteIndex,untyped,untyped	data: viewTrack(t: Song; ch: ChannelId; trackId: ByteIndex; value, body: untyped): untyped	
editPattern	libtrackerboy/data.html#editPattern.t,Song,ByteIndex,untyped,untyped	data: editPattern(s: var Song; orderNo: ByteIndex; value, body: untyped): untyped	
viewPattern	libtrackerboy/data.html#viewPattern.t,Song,ByteIndex,untyped,untyped	data: viewPattern(s: Song; orderNo: ByteIndex; value, body: untyped): untyped	
patternLen	libtrackerboy/data.html#patternLen,Song,ByteIndex	data: patternLen(s: Song; order: ByteIndex): Natural	
init	libtrackerboy/data.html#init,typedesc[SongList],PositiveByte	data: init(_: typedesc[SongList]; len: PositiveByte = 1): SongList	
`[]`	libtrackerboy/data.html#[],SongList,ByteIndex	data: `[]`(l: var SongList; i: ByteIndex): ref Song	
`[]`	libtrackerboy/data.html#[],SongList,ByteIndex_2	data: `[]`(l: SongList; i: ByteIndex): Immutable[ref Song]	
`[]=`	libtrackerboy/data.html#[]=,SongList,ByteIndex,ref.Song	data: `[]=`(l: var SongList; i: ByteIndex; s: ref Song)	
add	libtrackerboy/data.html#add,SongList	data: add(l: var SongList)	
add	libtrackerboy/data.html#add,SongList,ref.Song	data: add(l: var SongList; song: ref Song)	
duplicate	libtrackerboy/data.html#duplicate,SongList,ByteIndex	data: duplicate(l: var SongList; i: ByteIndex)	
remove	libtrackerboy/data.html#remove,SongList,ByteIndex	data: remove(l: var SongList; i: ByteIndex)	
moveUp	libtrackerboy/data.html#moveUp,SongList,ByteIndex	data: moveUp(l: var SongList; i: ByteIndex)	
moveDown	libtrackerboy/data.html#moveDown,SongList,ByteIndex	data: moveDown(l: var SongList; i: ByteIndex)	
len	libtrackerboy/data.html#len,SongList	data: len(l: SongList): Natural	
init	libtrackerboy/data.html#init,typedesc[Module]	data: init(_: typedesc[Module]): Module	
new	libtrackerboy/data.html#new,typedesc[Module]	data: new(_: typedesc[Module]): ref Module	
version	libtrackerboy/data.html#version,Module	data: version(m: Module): Version	
revisionMajor	libtrackerboy/data.html#revisionMajor,Module	data: revisionMajor(m: Module): int	
revisionMinor	libtrackerboy/data.html#revisionMinor,Module	data: revisionMinor(m: Module): int	
framerate	libtrackerboy/data.html#framerate,Module	data: framerate(m: Module): float	
toInfoString	libtrackerboy/data.html#toInfoString.c,string	data: toInfoString(str: string): InfoString	
`==`	libtrackerboy/data.html#==,SongList,SongList	data: `==`(a, b: SongList): bool	
`==`	libtrackerboy/data.html#==,SomeTable,SomeTable	data: `==`(a, b: SomeTable): bool	
