{
  "version": "v0.9.0",
  "date": "2024-05-27",
  "changes": "### Important\n\n- **Nim 2.0.0 is now required.**\n- All init procs have been renamed, `init(T, ...)` -> `initT(...)`\n- `Immutable[ref T]` has been replaced by `iref[T]`\n- `Immutable[ptr T]` has been replaced by `iptr[T]`\n- Renamed `toImmutable` -> `immutable`\n\nThe API in the data module has been completely overhauled:\n- removed types `EffectIndex`, `EffectColumns`\n- added consts `rangeSpeed`, `noLoopPoint`, `noteNone`, `instrumentNone` and\n  `effectNone`\n- Speed\n  - is now a `distinct uint8`\n  - Renamed `speedToFloat` -> `toFloat`\n  - Renamed `speedToTempo` -> `tempo`\n  - Added `toSpeed`, `isValid`, `$` procs\n- added type `LoopPoint`\n- Sequence\n  - renamed field `loopIndex` -> `loop`\n  - `loop` field is now of type `LoopPoint`\n  - add `isValid` proc\n  - removed `data`, `data=` procs\n- Instrument\n  - removed `new` overload\n  - add `hash` overload\n- Waveform\n  - removed `new` overload\n  - add `hash` overload\n- Renamed `SequenceSize` -> `SequenceLen`\n- Renamed `OrderSize` -> `OrderLen`\n- Table\n  - added proc `uniqueIds`\n- Order\n  - `Order` is now a `seq[OrderRow]`\n  - add proc `initOrderRow`, template `orow`\n  - removed procs `[]`, `[]=`, `len`, `setLen`, `setData`, `add`, `insert`,\n    `remove` and `swap`\n- Effect\n  - renamed `EffectType` -> `EffectCmd`, each enum starts with `ec` instead of `et`\n  - renamed field `effectType` -> `cmd`\n  - renamed proc `effectTypeShortensPattern` -> `shortensPattern`\n  - renamed proc `toEffectType` -> `toEffectCmd`\n  - renamed proc `effectTypeToChar` -> `effectCmdToChar`\n- TrackRow\n  - add types `NoteColumn` and `InstrumentColumn`\n  - field `note` is now of type `NoteColumn`\n  - field `instrument` is now of type `InstrumentColumn`\n  - added procs `has`, `value`, `asOption`, `$` for Column types\n  - removed procs `clearNote`, `clearInstrument`, `hasNote`, `hasInstrument`,\n    `setNote`, `setInstrument`, `queryNote`, `queryInstrument`,\n- Track\n  - Track data is now stored using a `ref seq[TrackRow]`\n  - added proc `data` for accessing the track's data seq\n  - removed procs `setNote`, `setInstrument`, `setEffect`, `setEffectType`,\n    `setEffectParam`\n  - add converter to a TrackView, `toView`\n- added types `Pattern`, `PatternView`, `SomePattern`, `SomeTrack`\n- Song\n  - add procs `$`, `isValid`, `removeUnusedTracks`, `allocateTracks`, `getRow`,\n    `effectiveTickrate`, `patternLen`\n  - `trackLen` is now a property instead of a field\n  - `editPattern` and `viewPattern` templates inject a `Pattern` variable\n    instead of a template. Use `value[channel]` instead of `value(channel)`\n- add types `SongPos`, `SongSpan`\n- SongList\n  - add procs `isValid`, `data`\n  - removed overload for `get` that returns a `ref Song`\n  - added proc `mget` that returns a `ref Song`\n  - removed procs `add`, `duplicate`, `remove`, `moveUp`, `moveDown`\n- Module\n  - add proc `isValid`\n\nChanges to the API in `engine`:\n- engine internals now utilize the new `tracking` module\n- modules `apucontrol`, `enginecontrol` and `frequency` have an unstable API,\n  so any changes made to them will not be documented.\n- added proc `isPlaying`\n- `getLocked` renamed to `locked`\n- added proc `unlocked`\n- invalid starting position given to `play` no longer results in an\n  `IndexDefect` being raised, instead the engine is halted.\n- `step` renamed to `tick`\n- `currentFrame` renamed to `frame`\n- `currentSong` renamed to `song`\n- `currentNote` renamed to `note`\n- `currentState` renamed to `trackState`\n- `getTrackTimbre` renamed to `trackTimbre`\n- `getTrackEnvelope` renamed to `trackEnvelope`\n- `getTrackPanning` renamed to `trackPanning`\n- `stepAndApply` renamed to `tickAndApply`\n- `EngineFrame` object changed\n  - `halted`, `startedNewRow`, `startedNewPattern` fields replaced by\n    `status: TrackerStatus`\n  - `speed` is now of type `Speed`\n  - `order` and `row` fields are replaced by `pos: SongPos`\n- `GlobalState` object removed, as the engine internals no longer requires it\n- `ufAll` renamed to `updateAll`\n\n### Added\n - (common) `iref[T]` and `iptr[T]` (these replace `Immutable[T]`)\n - (common) `FixedSeq[N, T]` type for a seq-like container of fixed capacity.\n - (common) `Tristate` enum\n - (ir) `==` operator overload for `RowIr`\n - (ir) `runtime` proc for an `Operation`\n - (ir) `toTrackRow` proc for converting an `Operation` back into a `TrackRow`\n - (ir) overload for `toIr` proc for partial ir conversion\n - (note) `NoteRange`, `Octave`, `Letter`, `NoteIndex` and `NotePair` types\n - (note) procs for converting a `NoteIndex` to a `NotePair` and vice versa\n - New module, `text`, for text conversion and parsing of libtrackerboy data.\n - New module, `tracking`, for tracking playback of a song.\n\n### Changed\n - (data) The data module has been overhauled, see above\n - (ir) `fromIr(TrackIr)` returns a tuple containing a track and a bool\n - (ir) `setFromIr` proc now returns `bool`\n - (ir) renamed proc `toEffectType` -> `toEffectCmd`\n - modules `apucontrol`, `enginecontrol` and `enginestate` are no longer\n   private and are now located in `libtrackerboy/engine`\n - (engine) see above for detailed changes.\n - (editing) completely rewritten, safer and easier to use.\n\n### Removed\n - (common) `MixMode` type and related procs.\n - (common) `Immutable[T]` type and related procs.\n - (data) `$` procs for `Sequence` and `WaveData` types. Use text module instead.\n - (data) `parseSequence` proc, use text module instead.\n - (data) `parseWave` proc, use text module instead.\n - (ir) `SongPath` and `PatternVisit` types.\n - (editing) `PatternIter`, `ColumnIter` types\n - (notes) `note` compile-time proc"
}