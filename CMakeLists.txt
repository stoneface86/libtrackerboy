#
# CMakeLists that builds libtrackerboy as a C static library. This CMakeLists
# provides a library named 'trackerboy' which can be used by your CMake project.
#
# Also provided is an example application, for testing purposes, which is not
# built by default. To enable building of this application, set
# LIBTRACKERBOY_ENABLE_EXAMPLE to ON when configuring.
#


cmake_minimum_required(VERSION 3.8)

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake ${CMAKE_MODULE_PATH})
find_package(Nim REQUIRED)

# extract project version from nimble
execute_process(
    COMMAND ${NIMBLE} --silent packageVersion
    OUTPUT_VARIABLE __version
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

project(
    libtrackerboy
    VERSION ${__version}
    LANGUAGES C
)
unset(__version)

option(LIBTRACKERBOY_ENABLE_EXAMPLE "Builds the example program using the library" OFF)

# Nim should use the same compiler as cmake
if (CMAKE_C_COMPILER_ID STREQUAL "MSVC")
    set(NIM_CC "vcc")
    list(APPEND BRIDGE_PASSC ${MSVC_RUNTIME})
elseif (CMAKE_C_COMPILER_ID STREQUAL "GNU")
    set(NIM_CC "gcc")
elseif (CMAKE_C_COMPILER_ID MATCHES "Clang")
    # Clang or AppleClang
    set(NIM_CC "clang")
else ()
    # unknown compiler family, might want to abort here
    # or provide your own compiler config (see nim.cfg)
    message(FATAL_ERROR "unknown compiler, manual configuration required")
endif ()

set(LIB_PROJECT "lib/trackerboy.nim")
set(LIB_SRC
    "${LIB_PROJECT}"
    "lib/modules/version.nim"
    "lib/config.nims"
)
set(LIB_TARGET "${CMAKE_STATIC_LIBRARY_PREFIX}trackerboy${CMAKE_STATIC_LIBRARY_SUFFIX}")
set(LIB_TARGET_PATH "${CMAKE_CURRENT_BINARY_DIR}/${LIB_TARGET}")

# build the static library via nimble
add_custom_command(
    OUTPUT "${LIB_TARGET_PATH}"
    COMMAND 
        ${NIMBLE} c
        -o:"${LIB_TARGET_PATH}"
        --cc:${NIM_CC}
        "${LIB_PROJECT}"
    DEPENDS "${LIB_SRC}"
    WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
)
add_custom_target(trackerboy_target DEPENDS "${LIB_TARGET_PATH}")

# import the library generated by nimble
add_library(trackerboy STATIC IMPORTED GLOBAL)
add_dependencies(trackerboy trackerboy_target)
set_target_properties(trackerboy
    PROPERTIES
    IMPORTED_LOCATION "${LIB_TARGET_PATH}"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_SOURCE_DIR}/include"
)

if (LIBTRACKERBOY_ENABLE_EXAMPLE)
    add_executable(example "lib/example.c")
    target_link_libraries(example PRIVATE trackerboy)
endif ()
